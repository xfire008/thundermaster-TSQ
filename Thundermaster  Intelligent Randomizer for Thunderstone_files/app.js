function Card(a){if(this.name=a.name,this.set=a.set,this.types=a.types,this.types||(this.types=""),this.light=a.light,this.light||(this.light=!1),this.skill=a.skill,this.skill||(this.skill=!1),this.attack=a.attack,this.attack||(this.attack=!1),this.healsWound=a.healsWound,this.healsWound||(this.healsWound=!1),this.magicAttack=a.magicAttack,this.magicAttack||(this.magicAttack=!1),this.discard=a.discard,this.discard||(this.discard=!1),this.removesMonstersFromHall=a.removesMonstersFromHall,this.removesMonstersFromHall||(this.removesMonstersFromHall=!1),this.level=a.level,this.level||(this.level=!1),this.requirements=a.requirements,this.requirements)for(var b=0;b<this.requirements.length;b++)this.requirements[b]=new Requirement(this.requirements[b]);else this.requirements=[];this.execute=a.execute,this.execute||(this.execute=!1),this.is=function(a){return this.types?-1!=this.types.indexOf(a):!1},this.has=function(a){return this[a]?this[a]:!1},this.cssClass="card "+this.set.cssName,this.cssId="card"+Util.strip(this.name)+Util.strip(this.set.name),this.toString=function(){return this.name}}function CardType(a,b,c,d,e,f){this.name=a,this.cssId="type"+Util.strip(this.name),this.minId="min_"+this.cssId,this.min=b,this.minDef=d,this.maxId="max_"+this.cssId,this.max=c,this.maxDef=e,this.side=f,this.toString=function(){return this.name}}function Condition(a){this.name=a.name,this.name||(this.name="Condition missing name"),this.type=a.type,this.match=function(b){return b?a.match(b):!1},this.match||(this.match=function(){return!0}),this.toString=function(){return this.name}}function GameRequirements(){this.reqs=new Array,this.add=function(a){for(var b=!1,c=0;c<this.reqs.length;c++)this.reqs[c].name==a.name&&(b=!0,this.reqs[c].qty=Math.max(this.reqs[c].qty,a.qty));b||this.reqs.push(Util.clone(a))},this.count=function(){for(var a=0,b=0;b<this.reqs.length;b++)a+=this.reqs[b].qty;return a},this.match=function(a){for(var b=!1,c=0;c<this.reqs.length;c++)this.reqs[c].qty>0&&this.reqs[c].match(a)&&(b=!0,this.reqs[c].qty--,Util.log(a+" matched "+this.reqs[c]+"; "+this.count()+" matches remaining"));return b}}function GameSet(){this.decks=[];for(var a=0;a<cardTypes.length;a++){var b=cardTypes[a];this.decks[b]=[];for(var c in cards[b])if(Util.cardRequired(cards[b][c])){var d=cards[b][c];this.decks[b][this.decks[b].length]=d,d.execute&&d.execute()}}this.toString=function(){return"toString not implemented on GameSet yet"},this.currentWeapons=0,this.currentItems=0,this.currentSpells=0,this.currentVillagers=0,this.villageLimits=!1,this.limitWeapons=3,this.limitItems=2,this.limitSpells=3,this.limitVillagers=3,this.roomFor=function(a){return this.villageLimits?a.types.match(/Item/)?this.checkType(this.currentItems,this.limitItems,a):a.types.match(/Weapon/)?this.checkType(this.currentWeapons,this.limitSpells,a):a.types.match(/Spell/)?this.checkType(this.currentSpells,this.limitVillagers,a):a.types.match(/Villager/)?this.checkType(this.currentVillagers,this.limitVillagers,a):!0:!0},this.checkType=function(a,b){return b>a?!0:!1},this.incrementCount=function(a){a.types.match(/Item/)?this.currentItems+=1:a.types.match(/Weapon/)?this.currentWeapons+=1:a.types.match(/Spell/)?this.currentSpells+=1:a.types.match(/Villager/)&&(this.currentVillagers+=1)}}function Requirement(a,b){a&&(this.match=a.match,this.name=a.name,this.type=a.type,this.qty=1,b&&(this.qty=b),this.toString=function(){return this.name})}function Set(a,b,c,d){this.name=a,this.advance=d,this.cssName=b,this.code=c,this.cssClass="set "+b,this.cssId="set"+Util.strip(this.cssName),this.toString=function(){return this.name}}var Controls={getClickEvent:function(a){return a.cssClass?'Controls.setClicked("'+a.cssId+'")':'cardClicked("'+a.cssId+'")'},getNumericBoxes:function(a){for(var b=('Util.adjust("min", "'+a.minId+'", "'+a.maxId+'");','Util.adjust("max", "'+a.minId+'", "'+a.maxId+'");',"<select id='"+a.minId+'\' onchange=\'Util.adjust("min", "'+a.minId+'", "'+a.maxId+"\");'>"),c="<select id='"+a.maxId+'\' onchange=\'Util.adjust("max", "'+a.minId+'", "'+a.maxId+"\");'>",d=a.min;d<=a.max;d++){var e="",f="";d==a.minDef&&(e='selected="selected"'),d==a.maxDef&&(f='selected="selected"'),b+="<option value='"+d+"' "+e+">"+d+"</option>",c+="<option value='"+d+"' "+f+">"+d+"</option>"}return b+="</select></span>",c+="</select></span>",b+" - "+c},setClicked:function(a){setClass=a.substring(3),document.getElementById(a).checked?($(".card."+setClass).show(),$("#"+a).parent().removeClass("disabled")):($(".card."+setClass).hide(),$("#"+a).parent().addClass("disabled")),Controls.setListVisibilities(),Options.saveOptions()},setListVisibilities:function(){for(var a in listSets){var b=a;if(document.getElementById(b)){var c=!1;for(var d in listSets[a]){var e=d;c|=document.getElementById(e).checked}c?$("#"+b).removeClass("hidden"):$("#"+b).addClass("hidden")}}},styleCard:function(a){var b=$("#"+a),c=$("label[for='"+a+"']"),d=b.val();b.parent().removeClass("disabled"),c.removeClass("required"),"No"==d?b.parent().addClass("disabled"):"Yes"==d&&c.addClass("required")},toggleCodes:function(){Util.getStyle(".setCode").style.display=document.getElementById("showCode").checked?"inline":"none",Options.saveOptions()},toggleLevels:function(){Util.getStyle(".level").style.display=document.getElementById("monsterLevels").checked?"inline":"none",Options.saveOptions()}},Game={getGameSet:function(){Options.getOptions(),gameSet=new GameSet,gameSet.villageLimits=$("#villageLimits")[0].checked,Util.buildDecks();for(var a=new Array,b=cardTypes.length-1;b>=0;b-=1){a[cardTypes[b].name]=new GameRequirements;for(var c=gameSet.decks[cardTypes[b].name],d=0;d<c.length;d+=1)for(var e=c[d],f=0;e.requirements&&f<e.requirements.length;f++){var g=e.requirements[f];a[g.type].add(g)}}$("#monsterLevels")[0].checked&&(a[local.Monster].add(new Requirement(req_monster_level_1)),a[local.Monster].add(new Requirement(req_monster_level_2)),a[local.Monster].add(new Requirement(req_monster_level_3)));for(var b=0;b<cardTypes.length;b+=1)for(var h=cardTypes[b],i=a[h.name],c=gameSet.decks[h.name],d=0;d<c.length;d+=1){var e=c[d];i.match(e)}for(var b=0;b<cardTypes.length;b++){for(var h=cardTypes[b],c=gameSet.decks[h.name],i=a[h.name],d=0;c.length<h.count&&d<decks[h.name].length;d++){var e=cards[h.name][decks[h.name][d]];if(gameSet.roomFor(e)){var j=0===i.count();if(j=i.match(e)||j,j=j||decks[h.name].length-d<=h.count-c.length){c.push(e),gameSet.incrementCount(e);for(var f=0;e.requirements&&f<e.requirements.length;f++){var g=e.requirements[f];a[g.type].add(g)}e.execute&&e.execute()}else Util.log(e+" discarded due to lack of space")}else Util.log(e+" discarded because of village type limits")}if(c.sort(),i.count()>0){Util.log(h.name+" requirements:"),Options.indent++;for(var d=0;d<i.reqs.length;d++){var g=i.reqs[d];Util.log(g+" required "+g.qty+" more")}Options.indent--}}return gameSet},quickd6:function(){for(var a=[],b=0;6>b;b+=1)a[b]=Game.getGameSet();for(var c=window.open("","quickd6",""),d="<html><head><title>Thundermaster "+local.QuickD6+"</title></head><body><center><table><tr>",b=0;6>b;b+=1){gs=a[b],d+="<td style='vertical-align:top;padding:10px;font-size:.8em;border:1px solid black;'>",d+="<center><h1>"+(b+1)+"</h1></center>";for(var e=0;e<cardTypes.length;e++){var f=cardTypes[e],g=gs.decks[f];if(g.length>0){d+="<div style='font-skill:bold;font-size:1.2em'>"+f+"</div>";for(var h=0;h<g.length;h++){var i=g[h],j="";f===cardTypes[MONSTER]&&$("#monsterLevels")[0].checked&&(j=" Lvl "+i.level+" "),d+="<div style='margin-left:10px'>"+i.name+" <span style='font-style:italic;font-size:.6em;'>"+j+"("+i.set.code+")</span></div>"}}}d+="</td>"}c.document.write(d),c.document.close()},randomize:function(){for(var a=Game.getGameSet(),b=0;b<cardTypes.length;b++){var c=cardTypes[b],d=a.decks[c.name],e="#"+c.cssId+"List",f=document.getElementById(c.cssId+"List");if(d.length>0){$(e).removeClass("hidden"),f.innerHTML="<li class='listHeader'>"+c.name+"</li>";for(var g=0;g<d.length;g++){var h=d[g],i="";h.level&&(i="<span class='level'> Lvl "+h.level+"</span>"),f.innerHTML+="<li class='gameCard  "+h.set.cssClass+"'>"+h.name+i+"<span class='setCode'> "+h.set.code+"</span></li>"}}else $(e).addClass("hidden")}document.getElementById("dungeonTypes").style.display="block",document.getElementById("villageTypes").style.display="block"}},Options={cookieName:"tsrandOptions",enableSaving:!0,indent:0,getOptions:function(){soloGame=document.getElementById("soloGame").checked;for(var a=0;a<cardTypes.length;a++){var b=cardTypes[a],c=document.getElementById(b.minId).value,d=document.getElementById(b.maxId).value;if(c==d)b.count=c;else{c>d&&(c^=d,d^=c,c^=d);var e=d-c+1,f=Math.floor(Math.random()*e);b.count=1*f+1*c}}},restoreOptions:function(){if(Util.log("Restoring cookie"),Options.indent++,cookie=$.cookie(Options.cookieName),window.location.search.match(/config=/)&&(cookie=decodeURIComponent(window.location.search.match(/config=([^&]*)/)[1]),$.cookie(Options.cookieName,cookie,{expires:365}),window.history&&history.pushState?window.history.pushState({},"","."):document.location.search=""),Util.log("Cookie loaded: "+cookie),cookie){opt=JSON.parse(cookie);for(var a in opt)Util.log("Loaded: "+a+" = "+opt[a]),document.getElementById(a)&&(element=document.getElementById(a),0==opt[a].indexOf("chk")?element.checked="chk:true"==opt[a]:element.value=opt[a])}Options.indent--;for(var b in set)Controls.setClicked(set[b].cssId);for(var b=0;b<cardTypes.length;b++)for(var c=cardTypes[b],d=cards[c.name],e=0;e<d.length;e++)Controls.styleCard(d[e].cssId);Controls.toggleCodes(),Controls.toggleLevels(),$("#optionsFilterList input").each(function(a,b){Controls.setClicked(b.id)}),Options.enableSaving=!0},saveOptions:function(){setTimeout(function(){function a(a,c){var d=document.getElementById(a);d&&("checkbox"==d.type?d.checked!=c&&(b[a]="chk:"+d.checked):d.value!=c&&(b[a]=d.value))}if(!Options.enableSaving)return!1;Util.log("Saving cookie");var b={};a("soloGame",!1),a("showCode",!0),a("villageLimits",!1),a("monsterLevels",!0);for(var c in set){var d=set[c],e=d.cssId;a(e,!0)}for(var f in cardTypes){var g=cardTypes[f];a(g.minId,g.minDef),a(g.maxId,g.maxDef);for(var h in cards[g.name]){var e=cards[g.name][h].cssId;a(e,"Maybe")}}Options.indent++;for(f in b)Util.log(f+": "+b[f]);Options.indent--,cookie=JSON.stringify(b),Util.log("Cookie: "+cookie),$.cookie(Options.cookieName,cookie,{expires:365})},10),document.getElementById("shareConfig").style.display="none",document.getElementById("shareConfigButton").style.display="block"}},Render={cardList:function(a){listSets[a.cssId]=new Array;var b="<li class='listHeader' id='"+a.cssId+"'>"+a.name+" <span class='typeOptions'>";b+=Controls.getNumericBoxes(a),b+="</span></li>",cards[a.name].sort(function(a,b){return a.name>b.name?1:-1});for(var c=0;c<cards[a.name].length;c++){var d=cards[a.name][c],e=d.set.cssId,f=d.cssClass,g=d.cssId;listSets[a.cssId][e]=!0,b+="<li class='"+f+" button noSelect'><select id='"+g+"' onchange='Options.saveOptions()' checked='checked'><option value='No'>No</option><option value='Maybe' selected='selected'>Maybe</option><option value='Yes'>Yes</option></select><label for='"+g+"' class='YesNoMaybe'>"+d+"<span class='setCode'> "+d.set.code+"</span></label></li>"}return b},setList:function(){var a,b,c,d,e;a="<li class='listHeader' id='listHeaderSet'>"+local.Set+"</li>",a+="<li class='setTypeHeader'>"+local.Thunderstone_Quest+"</li>";for(b in set)c=set[b],c.advance&&(d=c.cssClass,e=c.cssId,a+="<li class='"+d+" button noSelect'><input type='checkbox' id='"+e+"' onclick='"+Controls.getClickEvent(c)+"' checked='checked'><label for='"+e+"'>"+c+"<span class='setCode'> "+c.code+"</span></label></li>");for(b in set)c=set[b],c.advance||(c=set[b],d=c.cssClass,e=c.cssId,a+="<li class='"+d+" button noSelect'><input type='checkbox' id='"+e+"' onclick='"+Controls.getClickEvent(c)+"' checked='checked'><label for='"+e+"'>"+c+"<span class='setCode'> "+c.code+"</span></label></li>");return a}},Util={shortUrls:[],adjust:function(a,b,c){var d=document.getElementById(b),e=document.getElementById(c);d.value>e.value&&("min"==a?e.value=d.value:d.value=e.value),Options.saveOptions()},buildDeck:function(a){for(var b=new Array,c=cards[a.name],d=0;d<c.length;d++)Util.validate(c[d])&&(b[b.length]=d);return Util.fisherYates(b),b},buildDecks:function(){for(var a=0;a<cardTypes.length;a++){var b=cardTypes[a];decks[b.name]=Util.buildDeck(b)}},cardRequired:function(a){var b=a.cssId;return"Yes"==$("#"+b).val()},clone:function(a){if(null==a||"object"!=typeof a)return a;var b=new a.constructor;for(var c in a)b[c]=Util.clone(a[c]);return b},fisherYates:function(a){var b=a.length;if(0==b)return!1;for(;--b;){var c=Math.floor(Math.random()*(b+1)),d=a[b],e=a[c];a[b]=e,a[c]=d}},getConfigUrl:function(){var a=document.location.protocol,b=document.location.host,c=document.location.pathname,d=encodeURIComponent($.cookie(Options.cookieName));return a+"//"+b+c+"?config="+d},getStyle:function(a){var b=document.styleSheets[0],c=b.cssRules;b.rules&&(c=b.rules);for(var d in c)if(c[d].selectorText===a)return c[d]},getQRCodeUrl:function(a,b){return b||(b="150x150"),target=encodeURIComponent(a),"http://chart.apis.google.com/chart?cht=qr&chs="+b+"&choe=UTF-8&chld=H&chl="+target},isAppropriateForSinglePlayer:function(a){return!a.removesMonstersFromHall},localizeUI:function(){document.getElementById("randomizeButton").innerHTML=local.Randomize,document.getElementById("quickd6Button").innerHTML=local.QuickD6,document.getElementById("showCodeLabel").innerHTML=local.ShowCode,document.getElementById("villageLimitsLabel").innerHTML=local.VillageLimits,document.getElementById("soloGameLabel").innerHTML=local.Barricades_Mode,document.getElementById("instructions").innerHTML=local.Instructions,document.getElementById("requiredKeyLabel").innerHTML=local.Required,document.getElementById("allowedKeyLabel").innerHTML=local.Allowed,document.getElementById("disallowedKeyLabel").innerHTML=local.Disallowed,document.getElementById("selectedLanguage").src="images/flag/"+language+".png"},log:function(a){window.console&&console.log&&console.log(a)},resize:function(){width=$("body").width(),margins=6,minWidth=320,maxWidth=639+margins,width>2*minWidth?($(".container").width(width/2-margins+"px"),$("#spacerTop").width(Math.max(0,width/2-maxWidth)+"px"),$("#spacerBottom").hide()):($(".container, #log").width(width-margins+"px"),spacerWidth=(width-maxWidth)/2,$("#spacerTop").width(Math.max(0,spacerWidth)+"px"),$("#spacerBottom").show().width(Math.max(0,spacerWidth)+"px"))},setLanguage:function(a){$.cookie("language",a,{expires:365}),window.location.reload()},shareConfig:function(){var a=Util.getConfigUrl();document.getElementById("shareConfigButton").style.display="none",Util.shorten(a,Util.shareConfigDisplay)},shareConfigDisplay:function(a){if(200===a.status_code){var b=a.data.url;document.getElementById("shareConfigQR").src="http://chart.googleapis.com/chart?chs=150x150&cht=qr&chl="+encodeURI(b),document.getElementById("shareConfigBox").value=b,document.getElementById("shareConfig").style.display="block"}},shorten:function(a,b){var c="R_693d31ce6d7ae3a4eec10c44b82f0302",d="asmor",e="api.bit.ly",f="Request sent...";Util.shortUrls[a]?Util.shortURLs[a]!==f&&b(Util.shortURLs[a]):(Util.shortUrls[a]=f,$.getJSON("http://"+e+"/v3/shorten?longUrl="+encodeURIComponent(a)+"&login="+d+"&apiKey="+c+"&callback=?",Util.shortenCallbackWrapper(a,b)))},shortenCallbackWrapper:function(a,b){return function(c){Util.shortUrls[a]=200===c.status_code?c:null,b(c)}},strip:function(a){var b=/[^-A-Za-z0-9-_.]/g;return a.replace(b,"")},validate:function(a){var b="Maybe"==document.getElementById(a.cssId).value&&document.getElementById(a.set.cssId).checked;return b=b&&(!soloGame||Util.isAppropriateForSinglePlayer(a))}},LANG={};LANG.us={Dragonspire:"Dragonspire",Thunderstone:"Thunderstone",Monster:"Monster",Guardian:"Guardian",Tile2:"Dungeon Tiles &bull; Level 2",Tile3:"Dungeon Tiles &bull; Level 3",Hero:"Hero",Village:"Village",At_the_Foundations_of_the_World:"At the Foundations of the World",A_Mirror_in_the_Dark:"A Mirror in the Dark",Promo:"Promo",Ripples_in_Time:"Ripples in Time",Risen_from_the_Mire:"Risen from the Mire",Total_Eclipse_of_the_Sun:"Total Eclipse of the Sun",TBA:"TBA",Dungeon:"Dungeon",Allowed:"Allowed",Disallowed:"Disallowed",Tile1:"Dungeon Tiles &bull; Level 1",Black_Rock_Bandits:"Black Rock Bandits",Edlin:"Edlin",Outlands:"Outlands",Stalker:"Stalker",The_Yellow_Knight:"The Yellow Knight",Dark_Fire_Touch:"Dark Fire Touch",Form_of_the_Juggernaut:"Form of the Juggernaut",Hand_Axe:"Hand Axe",Necklace_of_Dawn:"Necklace of Dawn",Rapier:"Rapier",Scionic_Annals:"Scionic Annals",Abandoned_Gate:"Abandoned Gate",Crypt:"Crypt",Mine:"Mine",Sunken_Well:"Sunken Well",Throne_Room:"Throne Room",Vault:"Vault",Ancient_Adventurers:"Ancient Adventurers",Goblin_Grunts:"Goblin Grunts",Goblin_Kings_Guard:"Goblin King&#x27;s Guard",Hobgoblin_Brutes:"Hobgoblin Brutes",Kobold_Skirmishers:"Kobold Skirmishers",Spider_Terrors:"Spider Terrors",Smorga_the_Queen:"Smorga the Queen",Gorlander:"Gorlander",Hawkswood:"Hawkswood",Pylorian:"Pylorian",Scathian:"Scathian",Silverhelm:"Silverhelm",Stormhand:"Stormhand",Hammer:"Hammer",Maul:"Maul",Shortbow:"Shortbow",Shortspear:"Shortspear",Shortsword:"Shortsword",Fireball:"Fireball",Future_Vision:"Future Vision",Magic_Missile:"Magic Missile",Moonlight:"Moonlight",Amulet_of_Infravision:"Amulet of Infravision",Gem_of_Healing:"Gem of Healing",Tome_of_Knowledge:"Tome of Knowledge",Corrupted_Centaurs:"Corrupted Centaurs",Corrupted_Elves:"Corrupted Elves",Foundational_Keepers:"Foundational Keepers",Treefolk:"Treefolk",Twisted_Creatures:"Twisted Creatures",Woodland_Sprites:"Woodland Sprites",Elven_Outpost:"Elven Outpost",Elven_Ruins:"Elven Ruins",Fairy_Meadow:"Fairy Meadow",Hollow_Tree:"Hollow Tree",Ominous_Looking_Road:"Ominous Looking Road",Tree_House:"Tree House",Guardian_of_the_Sun:"Guardian of the Sun",Avania:"Avania",Brimstone:"Brimstone",Ehrlingal:"Ehrlingal",Felin:"Felin",Gendarme:"Gendarme",Sephilest:"Sephilest",Longbow:"Longbow",Longsword:"Longsword",Punching_Dagger:"Punching Dagger",Quarterstaff:"Quarterstaff",Arcane_Touch:"Arcane Touch",Consecration:"Consecration",Lightning_Bolt:"Lightning Bolt",Natures_Fury:"Nature&#x27;s Fury",Elven_Ring:"Elven Ring",Headband_of_Intellect:"Headband of Intellect",Strength_Gauntlets:"Strength Gauntlets",Wand_of_Light:"Wand of Light",Alchemy_Chamber:"Alchemy Chamber",Blood_Altar_Room:"Blood Altar Room",Bog:"Bog",The_Lichs_Tomb:"The Lich&#x27;s Tomb",The_Servants_Tombs:"The Servants&#x27; Tombs",Sunken_Graveyard:"Sunken Graveyard",Bog_Zombies:"Bog Zombies",Chaos_Lizards:"Chaos Lizards",Ensnaring_Vines:"Ensnaring Vines",Marsh_Trolls:"Marsh Trolls",Moor_Skeletons:"Moor Skeletons",Swamp_Spirits:"Swamp Spirits",Baalok_the_Flesh_Weaver:"Baalok, the Flesh Weaver",Baharan:"Baharan",Darameric:"Darameric",Linsha:"Linsha",Markennan:"Markennan",Nimblefingers:"Nimblefingers",Regalen:"Regalen",Battle_Axe:"Battle Axe",Boomerang:"Boomerang",Crystal_Dagger:"Crystal Dagger",Holy_Mace:"Holy Mace",Arcane_Aura:"Arcane Aura",Charm_Monster:"Charm Monster",Enchant_Weapons:"Enchant Weapons",Vampiric_Touch:"Vampiric Touch",Crystal_of_Scrying:"Crystal of Scrying",Holy_Symbol:"Holy Symbol",Potion_of_Stamina:"Potion of Stamina",Ring_of_Learning:"Ring of Learning",Abyssal_Founders:"Abyssal Founders",Air_Servitors:"Air Servitors",Divine_Founders:"Divine Founders",Earth_Servitors:"Earth Servitors",Fire_Servitors:"Fire Servitors",Water_Servitors:"Water Servitors",Abyssal_Temple:"Abyssal Temple",Air_Temple:"Air Temple",Celestial_Temple:"Celestial Temple",Earth_Temple:"Earth Temple",Fire_Temple:"Fire Temple",Water_Temple:"Water Temple",Miricelle_Scion_Defender:"Miricelle, Scion Defender",Darkrend:"Darkrend",Grimwolf:"Grimwolf",Honormain:"Honormain",Jadress:"Jadress",Moonblades:"Moonblades",Stormskull:"Stormskull",Broadsword:"Broadsword",Crossbow:"Crossbow",Flail:"Flail",Two_Handed_Sword:"Two-Handed Sword",Death_Pact:"Death Pact",Mirror_Image:"Mirror Image",Tempest:"Tempest",True_Seeing:"True Seeing",Damilu_Huskie:"Damilu Huskie",Darameres_Cloak:"Daramere&#x27;s Cloak",Potion_of_Light:"Potion of Light",Ring_of_Proficiency:"Ring of Proficiency",Gate_Cavern:"Gate Cavern",Dangerous_Passageway:"Dangerous Passageway",Fire_Chasm:"Fire Chasm",Ancient_Protectors:"Ancient Protectors",Ancient_Wyrms:"Ancient Wyrms",Gnoll_Raiders:"Gnoll Raiders",Doomknights:"Doomknights",Minions_of_Chaos:"Minions of Chaos",Torments:"Torments",Death_Sentinel:"Death Sentinel",Aird:"Aird",Arcanian:"Arcanian",Dunardic:"Dunardic",Regian:"Regian",Terakian:"Terakian",Veris:"Veris",Cursed_Mace:"Cursed Mace",Kings_Sword:"King&#x27;s Sword",Longspear:"Longspear",Magi_Staff:"Magi Staff",Creeping_Death:"Creeping Death",Frost_Bolt:"Frost Bolt",Mind_Control:"Mind Control",Summon_Storm:"Summon Storm",Amulet_of_Power:"Amulet of Power",Lightstone_Gem:"Lightstone Gem",Natures_Amulet:"Nature&#x27;s Amulet",Ring_of_Spell_Storing:"Ring of Spell Storing",Variants:"Variants",Side_Quests:"Side Quests",Guild_Sponsorships:"Guild Sponsorships",Prestige_Classes:"Prestige Classes",Barricades_Mode:"Barricades Mode",What_Lies_Beneath:"What Lies Beneath",Drain_Dwellers:"Drain Dwellers",Plague_Rats:"Plague Rats",Ghoulish_Scavengers:"Ghoulish Scavengers",Sewer_Trogs:"Sewer Trogs",Shapeless_Spawns:"Shapeless Spawns",Waste_Wyrms:"Waste Wyrms",Hive_Mind:"Hive Mind",Graeme_Crawford:"Graeme Crawford",Khomros:"Khomros",Ophialyn_the_Tracker:"Ophialyn the Tracker",Runiva_Highstone:"Runiva Highstone",Uvina_the_Delver:"Uvina the Delver",Wiltran_Proudmore:"Wiltran Proudmore",Bastard_Sword:"Bastard Sword",Battlepick:"Battlepick",Cleaners_Net:"Cleaner&#x27;s Net",The_Five_Points:"The Five Points",Acid_Burst:"Acid Burst",Ascendance:"Ascendance",Cure_Disease:"Cure Disease",Haste:"Haste",Bracers_of_Cleansing:"Bracers of Cleansing",Neverending_Rope_Spool:"Neverending Rope Spool",Studded_Leather_Shirt:"Studded Leather Shirt",Wand_of_Illumination:"Wand of Illumination",Arches:"Arches",Catacombs:"Catacombs",Ghoul_Nest:"Ghoul Nest",Junction:"Junction",Rat_Nest:"Rat Nest",Trog_Village:"Trog Village",Frozen_In_Time:"Frozen in Time",Abyssal_Servants:"Abyssal Servants",Arctic_Animals:"Arctic Animals",Bloodfrost_Clan:"Bloodfrost Clan",Frozen_Natives:"Frozen Natives",Ice_Behemoths:"Ice Behemoths",Tundra_Wolf_Pack:"Tundra Wolf Pack",Orgrum_Coldthunder:"Orgrum Coldthunder",Breezy:"Breezy",Drulfal_the_Primordial:"Drulfal the Primordial",Lefira:"Lefira",Lilande_Songweaver:"Lilande Songweaver",Rugduhr_Blackmane:"Rugduhr Blackmane",Samly_Thrackson:"Samly Thrackson",Fire_Rod:"Fire Rod",Flaming_Hammer:"Flaming Hammer",Frost_Bow:"Frost Bow",Mechanical_Harpoon:"Mechanical Harpoon",Blizzard:"Blizzard",Cone_of_Cold:"Cone of Cold",Create_Fire:"Create Fire",Inner_Fire:"Inner Fire",Eternal_Flame:"Eternal Flame",Ice_Climbing_Gear:"Ice Climbing Gear",Snow_Trekking_Tools:"Snow Trekking Tools",Tent:"Tent",Adlet_Hunting_Ground:"Adlet Hunting Ground",Glacial_Tomb:"Glacial Tomb",Icy_Glade:"Icy Glade",Orc_Tribute_Site:"Orc Tribute Site",Tundra_Chasms:"Tundra Chasms",Volcanic_Hot_Springs:"Volcanic Hot Springs",If_Required:"If Required",Instructions:"Click a card to toggle it, or a set to toggle all cards in that set",Maybe:"Maybe",MonsterLevels123:"Monster Levels 1, 2, &amp; 3",No:"No",QuickD6:"Quick d6",RandomBoard:"Random Board",Randomize:"Randomize",Required:"Required",Set:"Set",Sets:"Sets",ShowCode:"Display Set Codes",Show_Debug_Information:"Show Debug Information",Solo_Game:"Solo Game",Thunderstone_Quest:"Thunderstone Quest",VillageLimits:"Village Type Limits",Yes:"Yes"},LANG.de={Solo_Game:"Solo Spiel",Show_Debug_Information:"Debug Infos",Required:"auf jeden Fall",Allowed:"erlaubt",Disallowed:"verboten",Instructions:"Klicke zum Wechseln oder Ein- und Ausschalten",QuickD6:"Schnell d6",Randomize:"Setup generieren",Set:"Set",Yes:"immer",No:"nie",Maybe:"zuf&auml;llig",If_Required:"bei Bedarf","":""},LANG.fr={Solo_Game:"Jeu Solo",Show_Debug_Information:"Montrer les infos Debug",Required:"Requis",Allowed:"Permis",Disallowed:"Exclu",Instructions:"Cliquer sur une carte pour changer son statut, ou sur un set pour changer l'&eacute;tat de toutes ses cartes",QuickD6:"d6 Rapide",Randomize:"G&eacute;n&eacute;rer",Set:"Set",Yes:"Oui",No:"Non",Maybe:"Enventuellement",If_Required:"Si requis","":""},window.applicationCache&&(window.applicationCache.addEventListener("updateready",Util.onUpdateReady),window.applicationCache.status===window.applicationCache.UPDATEREADY&&Util.onUpdateReady());
var local,language=$.cookie("language")||"us";if(language&&LANG[language]){local={};for(var key in LANG.us)local[key]=LANG[language][key]||LANG.us[key]}for(var heroSkillThreshold=5,soloGame=!1,cardTypes=[new CardType(local.Variants,0,4,0,1,"Dungeon"),new CardType(local.Thunderstone,0,0,0,0,"Dungeon"),new CardType(local.Monster,1,6,3,3,"Dungeon"),new CardType(local.Tile1,0,3,0,1,"Dungeon"),new CardType(local.Tile2,0,3,0,1,"Dungeon"),new CardType(local.Tile3,0,3,0,1,"Dungeon"),new CardType(local.Guardian,0,5,0,1,"Dungeon"),new CardType(local.Hero,2,8,4,4,"Village"),new CardType(local.Village,4,12,8,8,"Village")],VARIANTS=0,THUNDERSTONE=1,MONSTER=2,TILE1=3,TILE2=4,TILE3=5,GUARDIAN=6,HERO=7,VILLAGE=8,cards=new Array,i=0;i<cardTypes.length;i++)cards[cardTypes[i].name]=new Array;var set={foundations:new Set(local.At_the_Foundations_of_the_World,"AtTheFoundationsOfTheWorld","Q4",!0),frozen:new Set(local.Frozen_In_Time,"FrozenInTime","Q7",!0),mirror:new Set(local.A_Mirror_in_the_Dark,"AMirrorInTheDark","Q1",!0),promo:new Set(local.Promo,"Promo","P",!0),ripples:new Set(local.Ripples_in_Time,"RipplesInTime","Q5",!0),risen:new Set(local.Risen_from_the_Mire,"RisenFromTheMire","Q3",!0),total:new Set(local.Total_Eclipse_of_the_Sun,"TotalEclipseOfTheSun","Q2",!0),whatlies:new Set(local.What_Lies_Beneath,"WhatLiesBeneath","Q6",!0),TBA:new Set(local.TBA,"TBA","Q8",!0)},decks=new Array,listSets=new Array;(navigator.userAgent.match(/iPhone/i)||navigator.userAgent.match(/iPod/i)||navigator.userAgent.match(/iPad/i))&&$(document).ready(function(){$("label[for]").click(function(){var a=$(this).attr("for");$("#"+a+"[type=radio], #"+a+"[type=checkbox]").attr("selected",!$("#"+a).attr("selected"))||$("#"+a)[0].focus()})}),$(document).ready(function(){$(".YesNoMaybe").click(function(a){a.preventDefault();var b=$(this).attr("for"),c=$("#"+b),d=$("label[for='"+b+"']"),e=c.val();c.parent().removeClass("disabled"),d.removeClass("required"),"Yes"==e?c.val("Maybe"):"No"==e?(c.val("Yes"),d.addClass("required")):(c.val("No"),c.parent().addClass("disabled")),Options.saveOptions()})}),$(function(){$.extend($.fn.disableTextSelect=function(){return this.each(function(){})}),$(".noSelect").disableTextSelect(),$("#randomizeButton").click(function(){Game.randomize()}),$("#quickd6Button").click(function(){Game.quickd6()}),$("#langUS").click(function(){Util.setLanguage("us")}),$("#langDE").click(function(){Util.setLanguage("de")}),$("#langFR").click(function(){Util.setLanguage("fr")})}),$(document).ready(function(){Util.resize()}),$(window).resize(function(){Util.resize()}),$(window).unload(function(){Options.saveOptions()}),req_monster_level_1=new Condition({name:"req_monster_level_1",type:local.Monster,match:function(a){return a.level&&1===a.level}}),req_monster_level_2=new Condition({name:"req_monster_level_2",type:local.Monster,match:function(a){return a.level&&2===a.level}}),req_monster_level_3=new Condition({name:"req_monster_level_3",type:local.Monster,match:function(a){return a.level&&3===a.level}}),req_hero_archer=new Condition({name:"req_hero_archer",type:local.Hero,match:function(a){return a.is("Archer")}}),req_hero_rogue=new Condition({name:"req_hero_rogue",type:local.Hero,match:function(a){return a.is("Rogue")}}),req_hero_attack=new Condition({name:"req_hero_attack",type:local.Hero,match:function(a){return a.has("attack")}}),req_hero_cleric=new Condition({name:"req_hero_cleric",type:local.Hero,match:function(a){return a.is("Cleric")}}),req_hero_heals_wound=new Condition({name:"req_hero_heals_wound",type:local.Hero,match:function(a){return a.has("healsWound")}}),req_hero_fighter=new Condition({name:"req_hero_fighter",type:local.Hero,match:function(a){return a.is("Fighter")}}),req_hero_human=new Condition({name:"req_hero_human",type:local.Hero,match:function(a){return a.is("Human")}}),req_hero_dwarf=new Condition({name:"req_hero_dwarf",type:local.Hero,match:function(a){return a.is("Dwarf")}}),req_hero_halfling=new Condition({name:"req_hero_halfling",type:local.Hero,match:function(a){return a.is("Halfling")}}),req_hero_light=new Condition({name:"req_hero_light",type:local.Hero,match:function(a){return a.has("light")}}),req_hero_magic_attack=new Condition({name:"req_hero_magic_attack",type:local.Hero,match:function(a){return a.has("magicAttack")}}),req_hero_ranger=new Condition({name:"req_hero_ranger",type:local.Hero,match:function(a){return a.is("Ranger")}}),req_hero_skill=new Condition({name:"req_hero_skill",type:local.Hero,match:function(a){return a.has("skill")>=heroSkillThreshold}}),req_hero_thief=new Condition({name:"req_hero_thief",type:local.Hero,match:function(a){return a.is("Thief")}}),req_hero_weak=new Condition({name:"req_hero_weak",type:local.Hero,match:function(a){return a.has("skill")<heroSkillThreshold}}),req_hero_wizard=new Condition({name:"req_hero_wizard",type:local.Hero,match:function(a){return a.is("Wizard")}}),req_village_attack=new Condition({name:"req_village_attack",type:local.Village,match:function(a){return a.has("attack")}}),req_village_blunt_weapon=new Condition({name:"req_village_blunt_weapon",type:local.Village,match:function(a){return a.is("Weapon")&&a.is("Blunt")}}),req_village_bow=new Condition({name:"req_village_bow",type:local.Village,match:function(a){return a.is("Bow")}}),req_village_dagger=new Condition({name:"req_village_dagger",type:local.Village,match:function(a){return a.is("Dagger")}}),req_village_edged_weapon=new Condition({name:"req_village_edged_weapon",type:local.Village,match:function(a){return a.is("Weapon")&&a.is("Edged")}}),req_village_polearm_weapon=new Condition({name:"req_village_polearm_weapon",type:local.Village,match:function(a){return a.is("Weapon")&&a.is("Polearm")}}),req_village_food=new Condition({name:"req_village_food",type:local.Village,match:function(a){return a.is("Food")}}),req_village_item=new Condition({name:"req_village_item",type:local.Village,match:function(a){return a.is("Item")}}),req_village_light=new Condition({name:"req_village_light",type:local.Village,match:function(a){return a.has("light")}}),req_village_light_item=new Condition({name:"req_village_light_item",type:local.Village,match:function(a){return a.has("light")&&a.is("Item")}}),req_village_discard=new Condition({name:"req_village_discard",type:local.Village,match:function(a){return a.has("discard")}}),req_village_magic_attack=new Condition({name:"req_village_magic_attack",type:local.Village,match:function(a){return a.has("magicAttack")}}),req_village_mercenary=new Condition({name:"req_village_mercenary",type:local.Village,match:function(a){return a.is("Mercenary")}}),req_village_nonedged_weapon=new Condition({name:"req_village_nonedged_weapon",type:local.Village,match:function(a){return a.is("Weapon")&&!a.is("Edged")}}),req_village_spell=new Condition({name:"req_village_spell",type:local.Village,match:function(a){return a.is("Spell")}}),req_village_spell_magic_attack=new Condition({name:"req_village_spell_magic_attack",type:local.Village,match:function(a){return a.has("magicAttack")&&a.is("Spell")}}),req_village_spell_arcane=new Condition({name:"req_village_spell_arcane",type:local.Village,match:function(a){return a.is("Arcane")&&a.is("Spell")}}),req_village_elemental=new Condition({name:"req_village_elemental",type:local.Village,match:function(a){return a.is("Elemental")}}),req_village_skill=new Condition({name:"req_village_skill",type:local.Village,match:function(a){return a.has("skill")}}),req_village_villager=new Condition({name:"req_village_villager",type:local.Village,match:function(a){return a.is("Villager")}}),req_village_weapon=new Condition({name:"req_village_weapon",type:local.Village,match:function(a){return a.is("Weapon")}}),req_village_weapon_attack=new Condition({name:"req_village_weapon_attack",type:local.Village,match:function(a){return a.is("Weapon")&&a.has("attack")}}),req_village_weapon_edged_weighs_lt_3=new Condition({name:"req_village_weapon_edged_weighs_lt_3",type:local.Village,match:function(a){return a.is("Weapon")&&a.is("Edged")&&a.skill>=3}}),cards[local.Guardian].push(new Card({name:local.Smorga_the_Queen,set:set.mirror})),cards[local.Guardian].push(new Card({name:local.Guardian_of_the_Sun,set:set.total})),cards[local.Guardian].push(new Card({name:local.Baalok_the_Flesh_Weaver,set:set.risen})),cards[local.Guardian].push(new Card({name:local.Miricelle_Scion_Defender,set:set.foundations})),cards[local.Guardian].push(new Card({name:local.Death_Sentinel,set:set.ripples})),cards[local.Guardian].push(new Card({name:local.Hive_Mind,set:set.whatlies})),cards[local.Guardian].push(new Card({name:local.Orgrum_Coldthunder,set:set.frozen})),cards[local.Variants].push(new Card({name:local.Side_Quests,set:set.mirror,removesMonstersFromHall:!0})),cards[local.Variants].push(new Card({name:local.Guild_Sponsorships,set:set.mirror})),cards[local.Variants].push(new Card({name:local.Prestige_Classes,set:set.whatlies})),cards[local.Variants].push(new Card({name:local.Solo_Game,set:set.whatlies,execute:function(){cardTypes[HERO].count=2,cardTypes[VILLAGE].count=4}})),cards[local.Monster].push(new Card({name:local.Black_Rock_Bandits,set:set.promo,types:"Humanoid",level:1,requirements:[req_hero_fighter,req_hero_rogue,req_hero_cleric,req_hero_wizard]})),cards[local.Monster].push(new Card({name:local.Ancient_Adventurers,set:set.mirror,types:"Undead",level:3,requirements:[req_hero_human,req_hero_fighter,req_hero_rogue,req_hero_cleric,req_hero_wizard]})),cards[local.Monster].push(new Card({name:local.Goblin_Grunts,set:set.mirror,types:"Humanoid",level:1,requirements:[req_village_edged_weapon,req_hero_fighter,req_hero_rogue,req_hero_cleric,req_hero_wizard]})),cards[local.Monster].push(new Card({name:local.Goblin_Kings_Guard,set:set.mirror,types:"Humanoid",level:3,requirements:[req_village_weapon,req_hero_fighter,req_hero_rogue,req_hero_cleric,req_hero_wizard]})),cards[local.Monster].push(new Card({name:local.Hobgoblin_Brutes,set:set.mirror,types:"Humanoid",level:2,requirements:[req_hero_human,req_hero_magic_attack,req_hero_attack,req_village_spell,req_village_weapon_attack,req_hero_fighter,req_hero_rogue,req_hero_cleric,req_hero_wizard]})),cards[local.Monster].push(new Card({name:local.Kobold_Skirmishers,set:set.mirror,types:"Humanoid",level:1,requirements:[req_village_weapon,req_hero_fighter,req_hero_rogue,req_hero_cleric,req_hero_wizard]})),cards[local.Monster].push(new Card({name:local.Spider_Terrors,set:set.mirror,types:"Giant Demon Vermin",level:2,requirements:[req_village_weapon,req_village_spell,req_hero_fighter,req_hero_rogue,req_hero_cleric,req_hero_wizard]})),cards[local.Monster].push(new Card({name:local.Corrupted_Centaurs,set:set.total,types:"Beast Humanoid",level:3,requirements:[req_village_spell,req_village_weapon,req_village_item,req_hero_fighter,req_hero_rogue,req_hero_cleric,req_hero_wizard]})),cards[local.Monster].push(new Card({name:local.Corrupted_Elves,set:set.total,types:"Humanoid",level:2,requirements:[req_hero_fighter,req_hero_rogue,req_hero_cleric,req_hero_wizard]})),cards[local.Monster].push(new Card({name:local.Foundational_Keepers,set:set.total,types:"Elemental Giant Humanoid",level:2,requirements:[req_hero_fighter,req_hero_rogue,req_hero_cleric,req_hero_wizard]})),cards[local.Monster].push(new Card({name:local.Treefolk,set:set.total,types:"Giant Plant",level:3,requirements:[req_hero_fighter,req_hero_rogue,req_hero_cleric,req_hero_wizard]})),cards[local.Monster].push(new Card({name:local.Twisted_Creatures,set:set.total,types:"Beast",level:1,requirements:[req_village_bow,req_hero_fighter,req_hero_rogue,req_hero_cleric,req_hero_wizard]})),cards[local.Monster].push(new Card({name:local.Woodland_Sprites,set:set.total,types:"Fey",level:1,requirements:[req_hero_fighter,req_hero_rogue,req_hero_cleric,req_hero_wizard]})),cards[local.Monster].push(new Card({name:local.Bog_Zombies,set:set.risen,types:"Undead",level:1,requirements:[req_hero_fighter,req_hero_rogue,req_hero_cleric,req_hero_wizard]})),cards[local.Monster].push(new Card({name:local.Chaos_Lizards,set:set.risen,types:"Humanoid",level:2,requirements:[req_village_spell,req_village_weapon,req_hero_fighter,req_hero_rogue,req_hero_cleric,req_hero_wizard]})),cards[local.Monster].push(new Card({name:local.Ensnaring_Vines,set:set.risen,types:"Elemental Plant",level:1,requirements:[req_village_spell,req_village_weapon,req_hero_fighter,req_hero_rogue,req_hero_cleric,req_hero_wizard]})),cards[local.Monster].push(new Card({name:local.Marsh_Trolls,set:set.risen,types:"Giant",level:3,requirements:[req_village_spell,req_village_edged_weapon,req_village_item,req_hero_magic_attack,req_hero_fighter,req_hero_rogue,req_hero_cleric,req_hero_wizard]})),cards[local.Monster].push(new Card({name:local.Moor_Skeletons,set:set.risen,types:"Undead",level:2,requirements:[req_hero_magic_attack,req_village_edged_weapon,req_village_bow,req_hero_fighter,req_hero_rogue,req_hero_cleric,req_hero_wizard]})),cards[local.Monster].push(new Card({name:local.Swamp_Spirits,set:set.risen,types:"Undead",level:3,requirements:[req_hero_fighter,req_hero_rogue,req_hero_cleric,req_hero_wizard]})),cards[local.Monster].push(new Card({name:local.Abyssal_Founders,set:set.foundations,types:"Elemental Demon Beast",level:3,requirements:[req_hero_fighter,req_hero_rogue,req_hero_cleric,req_hero_wizard]})),cards[local.Monster].push(new Card({name:local.Air_Servitors,set:set.foundations,types:"Elemental",level:1,requirements:[req_village_spell,req_hero_magic_attack,req_hero_fighter,req_hero_rogue,req_hero_cleric,req_hero_wizard]})),cards[local.Monster].push(new Card({name:local.Divine_Founders,set:set.foundations,types:"Elemental Celestial",level:3,requirements:[req_village_weapon,req_hero_fighter,req_hero_rogue,req_hero_cleric,req_hero_wizard]})),cards[local.Monster].push(new Card({name:local.Earth_Servitors,set:set.foundations,types:"Elemental",level:2,requirements:[req_village_bow,req_village_edged_weapon,req_village_weapon_attack,req_hero_magic_attack,req_hero_fighter,req_hero_rogue,req_hero_cleric,req_hero_wizard]})),cards[local.Monster].push(new Card({name:local.Fire_Servitors,set:set.foundations,types:"Elemental",level:2,requirements:[req_village_spell,req_village_weapon,req_hero_fighter,req_hero_rogue,req_hero_cleric,req_hero_wizard]})),cards[local.Monster].push(new Card({name:local.Water_Servitors,set:set.foundations,types:"Elemental",level:1,requirements:[req_village_weapon,req_hero_fighter,req_hero_rogue,req_hero_cleric,req_hero_wizard]})),cards[local.Monster].push(new Card({name:local.Ancient_Protectors,set:set.ripples,types:"Golem",level:3,requirements:[req_hero_skill,req_hero_fighter,req_hero_rogue,req_hero_cleric,req_hero_wizard]})),cards[local.Monster].push(new Card({name:local.Ancient_Wyrms,set:set.ripples,types:"Dragon",level:3,requirements:[req_village_weapon,req_hero_fighter,req_hero_rogue,req_hero_cleric,req_hero_wizard]})),cards[local.Monster].push(new Card({name:local.Gnoll_Raiders,set:set.ripples,types:"Humanoid",level:1,requirements:[req_village_weapon,req_hero_fighter,req_hero_rogue,req_hero_cleric,req_hero_wizard]})),cards[local.Monster].push(new Card({name:local.Doomknights,set:set.ripples,types:"Undead",level:1,requirements:[req_hero_fighter,req_hero_rogue,req_hero_cleric,req_hero_wizard]})),cards[local.Monster].push(new Card({name:local.Minions_of_Chaos,set:set.ripples,types:"Demon",level:2,requirements:[req_hero_fighter,req_hero_rogue,req_hero_cleric,req_hero_wizard]})),cards[local.Monster].push(new Card({name:local.Torments,set:set.ripples,types:"Elemental",level:2,requirements:[req_hero_magic_attack,req_village_weapon,req_hero_fighter,req_hero_rogue,req_hero_cleric,req_hero_wizard]})),cards[local.Monster].push(new Card({name:local.Drain_Dwellers,set:set.whatlies,types:"Beast Aberration",level:1,requirements:[req_village_weapon,req_village_spell,req_hero_fighter,req_hero_rogue,req_hero_cleric,req_hero_wizard]})),cards[local.Monster].push(new Card({name:local.Ghoulish_Scavengers,set:set.whatlies,types:"Undead",level:2,requirements:[req_village_spell,req_village_item,req_hero_magic_attack,req_hero_fighter,req_hero_rogue,req_hero_cleric,req_hero_wizard]})),cards[local.Monster].push(new Card({name:local.Sewer_Trogs,set:set.whatlies,types:"Humanoid",level:2,requirements:[req_village_weapon,req_hero_fighter,req_hero_rogue,req_hero_cleric,req_hero_wizard]})),cards[local.Monster].push(new Card({name:local.Shapeless_Spawns,set:set.whatlies,types:"Aberration Fey Humanoid Plant Vermin",level:3,requirements:[req_hero_human,req_hero_dwarf,req_hero_fighter,req_hero_rogue,req_hero_cleric,req_hero_wizard]})),cards[local.Monster].push(new Card({name:local.Plague_Rats,set:set.whatlies,types:"Vermin Swarm",level:1,requirements:[req_village_weapon,req_hero_fighter,req_hero_rogue,req_hero_cleric,req_hero_wizard]})),cards[local.Monster].push(new Card({name:local.Waste_Wyrms,set:set.whatlies,types:"Giant Elemental Beast Vermin",level:3,requirements:[req_hero_attack,req_village_spell,req_village_weapon,req_hero_fighter,req_hero_rogue,req_hero_cleric,req_hero_wizard]})),cards[local.Monster].push(new Card({name:local.Arctic_Animals,set:set.frozen,types:"Elemental Beast Demon Fey",level:1,requirements:[req_hero_dwarf,req_hero_halfling,req_hero_fighter,req_hero_rogue,req_hero_cleric,req_hero_wizard]})),cards[local.Monster].push(new Card({name:local.Abyssal_Servants,set:set.frozen,types:"Elemental Demon Beast Fey",level:1,requirements:[req_hero_magic_attack,req_village_bow,req_hero_fighter,req_hero_rogue,req_hero_cleric,req_hero_wizard]})),cards[local.Monster].push(new Card({name:local.Bloodfrost_Clan,set:set.frozen,types:"Beast Humanoid Elemental",level:2,requirements:[req_village_bow,req_hero_fighter,req_hero_rogue,req_hero_cleric,req_hero_wizard]})),cards[local.Monster].push(new Card({name:local.Tundra_Wolf_Pack,set:set.frozen,types:"Beast Swarm",level:2,requirements:[req_village_weapon,req_hero_fighter,req_hero_rogue,req_hero_cleric,req_hero_wizard]})),cards[local.Monster].push(new Card({name:local.Frozen_Natives,set:set.frozen,types:"Humanoid Beast",level:3,requirements:[req_hero_fighter,req_hero_rogue,req_hero_cleric,req_hero_wizard]})),cards[local.Monster].push(new Card({name:local.Ice_Behemoths,set:set.frozen,types:"Elemental Giant Humanoid Vermin Golem",level:3,requirements:[req_village_weapon,req_village_light,req_hero_magic_attack,req_hero_fighter,req_hero_rogue,req_hero_cleric,req_hero_wizard]})),cards[local.Hero].push(new Card({name:local.Edlin,set:set.promo,types:"Fighter Human",skill:4,attack:!0,requirements:[req_village_weapon]})),cards[local.Hero].push(new Card({name:local.Outlands,set:set.promo,types:"Fighter Human",skill:5,attack:!0,requirements:[]})),cards[local.Hero].push(new Card({name:local.Stalker,set:set.promo,types:"Rogue Elf",skill:4,attack:!0,requirements:[]})),cards[local.Hero].push(new Card({name:local.The_Yellow_Knight,set:set.promo,types:"Fighter Human",skill:4,attack:!0,requirements:[]})),cards[local.Hero].push(new Card({name:local.Gorlander,set:set.mirror,types:"Fighter Human",skill:6,attack:!0,requirements:[req_village_weapon]})),cards[local.Hero].push(new Card({name:local.Hawkswood,set:set.mirror,types:"Rogue Avian Elf",skill:3,attack:!0,light:!0,requirements:[]})),cards[local.Hero].push(new Card({name:local.Pylorian,set:set.mirror,types:"Wizard Human",skill:2,magicAttack:!0,requirements:[req_village_spell_arcane]})),cards[local.Hero].push(new Card({name:local.Scathian,set:set.mirror,types:"Rogue Wizard Halfling",skill:2,magicAttack:!0,requirements:[]})),cards[local.Hero].push(new Card({name:local.Silverhelm,set:set.mirror,types:"Cleric Fighter Dwarf",skill:4,attack:!0,skill:!0,healsWound:!0,requirements:[]})),cards[local.Hero].push(new Card({name:local.Stormhand,set:set.mirror,types:"Fighter Dwarf",skill:4,attack:!0,requirements:[req_village_edged_weapon]})),cards[local.Hero].push(new Card({name:local.Avania,set:set.total,types:"Cleric Human Celestial",skill:3,magicAttack:!0,healsWound:!0,requirements:[]})),cards[local.Hero].push(new Card({name:local.Brimstone,set:set.total,types:"Rogue Dwarf",skill:3,attack:!0,light:!0,requirements:[]})),cards[local.Hero].push(new Card({name:local.Ehrlingal,set:set.total,types:"Rogue Halfling",skill:4,attack:!0,requirements:[req_village_dagger]})),cards[local.Hero].push(new Card({name:local.Felin,set:set.total,types:"Cleric Wizard Elf",skill:2,attack:!0,light:!0,requirements:[]})),cards[local.Hero].push(new Card({name:local.Gendarme,set:set.total,types:"Wizard Dwarf",skill:3,magicAttack:!0,requirements:[req_village_weapon]})),cards[local.Hero].push(new Card({name:local.Sephilest,set:set.total,types:"Fighter Elf",skill:5,attack:!0,requirements:[]})),cards[local.Hero].push(new Card({name:local.Baharan,set:set.risen,types:"Cleric Triton",skill:3,magicAttack:!0,healsWound:!0,requirements:[]})),cards[local.Hero].push(new Card({name:local.Darameric,set:set.risen,types:"Cleric Wizard Elf",skill:2,magicAttack:!0,healsWound:!0,requirements:[]})),cards[local.Hero].push(new Card({name:local.Linsha,set:set.risen,types:"Fighter Human",skill:5,attack:!0,requirements:[req_village_weapon]})),cards[local.Hero].push(new Card({name:local.Markennan,set:set.risen,types:"Fighter Human",skill:5,attack:!0,requirements:[req_village_blunt_weapon]})),cards[local.Hero].push(new Card({name:local.Nimblefingers,set:set.risen,types:"Rogue Elf",skill:3,attack:!0,light:!0,requirements:[]})),cards[local.Hero].push(new Card({name:local.Regalen,set:set.risen,types:"Wizard Elf",skill:1,magicAttack:!0,light:!0,requirements:[req_village_spell]})),cards[local.Hero].push(new Card({name:local.Darkrend,set:set.foundations,types:"Human Wizard",skill:2,magicAttack:!0,requirements:[]})),cards[local.Hero].push(new Card({name:local.Grimwolf,set:set.foundations,types:"Fighter Human Undead",skill:5,attack:!0,requirements:[]})),cards[local.Hero].push(new Card({name:local.Honormain,set:set.foundations,types:"Cleric Human",skill:4,attack:!0,healsWound:!0,requirements:[]})),cards[local.Hero].push(new Card({name:local.Jadress,set:set.foundations,types:"Rogue Elf",skill:4,attack:!0,requirements:[req_village_bow]})),cards[local.Hero].push(new Card({name:local.Moonblades,set:set.foundations,types:"Fighter Rogue Human",skill:4,attack:!0,requirements:[]})),cards[local.Hero].push(new Card({name:local.Stormskull,set:set.foundations,types:"Wizard Human Orc",skill:2,magicAttack:!0,light:!0,requirements:[req_village_spell]})),cards[local.Hero].push(new Card({name:local.Aird,set:set.ripples,types:"Rogue Human",skill:3,attack:!0,requirements:[]})),cards[local.Hero].push(new Card({name:local.Arcanian,set:set.ripples,types:"Wizard Human",skill:2,magicAttack:!0,requirements:[]})),cards[local.Hero].push(new Card({name:local.Dunardic,set:set.ripples,types:"Fighter Human",skill:5,attack:!0,requirements:[]})),cards[local.Hero].push(new Card({name:local.Regian,set:set.ripples,types:"Cleric Human",skill:3,magicAttack:!0,healsWound:!0,requirements:[]})),cards[local.Hero].push(new Card({name:local.Terakian,set:set.ripples,types:"Fighter Cleric Human",skill:4,attack:!0,healsWound:!0,requirements:[]})),cards[local.Hero].push(new Card({name:local.Veris,set:set.ripples,types:"Wizard Elf",skill:3,magicAttack:!0,light:!0,requirements:[req_village_weapon]})),cards[local.Hero].push(new Card({name:local.Graeme_Crawford,set:set.whatlies,types:"Cleric Fighter Human",skill:4,attack:!0,healsWound:!0,requirements:[req_village_weapon]})),cards[local.Hero].push(new Card({name:local.Khomros,set:set.whatlies,types:"Fighter Triton",skill:5,attack:!0,requirements:[req_village_weapon,req_village_discard]})),cards[local.Hero].push(new Card({name:local.Ophialyn_the_Tracker,set:set.whatlies,types:"Fighter Elf Human",skill:4,attack:!0,requirements:[]})),cards[local.Hero].push(new Card({name:local.Runiva_Highstone,set:set.whatlies,types:"Wizard Dwarf",skill:3,magicAttack:!0,requirements:[req_village_spell,req_village_discard]})),cards[local.Hero].push(new Card({name:local.Uvina_the_Delver,set:set.whatlies,types:"Rogue Halfling",skill:3,attack:!0,requirements:[req_village_discard]})),cards[local.Hero].push(new Card({name:local.Wiltran_Proudmore,set:set.whatlies,types:"Cleric Halfling",skill:2,magicAttack:!0,healsWound:!0,requirements:[req_village_spell,req_village_discard]})),cards[local.Hero].push(new Card({name:local.Breezy,set:set.frozen,types:"Wizard Human",skill:3,magicAttack:!0,requirements:[req_village_elemental]})),cards[local.Hero].push(new Card({name:local.Drulfal_the_Primordial,set:set.frozen,types:"Cleric Elemental Dwarf",skill:4,attack:!0,healsWound:!0,requirements:[req_village_elemental]})),cards[local.Hero].push(new Card({name:local.Lefira,set:set.frozen,types:"Fighter Halfling",skill:3,attack:!0,requirements:[req_village_edged_weapon]})),cards[local.Hero].push(new Card({name:local.Lilande_Songweaver,set:set.frozen,types:"Rogue Elf",skill:3,attack:!0,light:!0,requirements:[req_village_spell]})),cards[local.Hero].push(new Card({name:local.Rugduhr_Blackmane,set:set.frozen,types:"Rogue Demon Dwarf",skill:4,attack:!0,light:!0,requirements:[]})),cards[local.Hero].push(new Card({name:local.Samly_Thrackson,set:set.frozen,types:"Fighter Cleric Human Orc",skill:4,attack:!0,healsWound:!0,requirements:[]})),cards[local.Village].push(new Card({name:local.Dark_Fire_Touch,set:set.promo,types:"Spell Elemental Chaos",magicAttack:!0})),cards[local.Village].push(new Card({name:local.Form_of_the_Juggernaut,set:set.promo,types:"Spell	Arcane"})),cards[local.Village].push(new Card({name:local.Hand_Axe,set:set.promo,types:"Weapon	Edged",attack:!0,skill:3})),cards[local.Village].push(new Card({name:local.Necklace_of_Dawn,set:set.promo,types:"Item Magic"})),cards[local.Village].push(new Card({name:local.Rapier,set:set.promo,types:"Weapon	Edged",attack:!0,skill:6})),cards[local.Village].push(new Card({name:local.Scionic_Annals,set:set.promo,types:"Item Magic"})),cards[local.Village].push(new Card({name:local.Hammer,set:set.mirror,types:"Weapon	Blunt",attack:!0,skill:4})),cards[local.Village].push(new Card({name:local.Maul,set:set.mirror,types:"Weapon	Blunt",attack:!0,skill:8})),cards[local.Village].push(new Card({name:local.Shortbow,set:set.mirror,types:"Weapon	Bow",attack:!0,skill:4})),cards[local.Village].push(new Card({name:local.Shortspear,set:set.mirror,types:"Weapon	Edged",attack:!0,skill:3})),cards[local.Village].push(new Card({name:local.Shortsword,set:set.mirror,types:"Weapon	Edged",attack:!0,skill:3})),cards[local.Village].push(new Card({name:local.Fireball,set:set.mirror,types:"Spell Elemental",magicAttack:!0,light:!0})),cards[local.Village].push(new Card({name:local.Future_Vision,set:set.mirror,types:"Spell Arcane Divine",light:!0})),cards[local.Village].push(new Card({name:local.Magic_Missile,set:set.mirror,types:"Spell Arcane Divine",magicAttack:!0})),cards[local.Village].push(new Card({name:local.Moonlight,set:set.mirror,types:"Spell Elemental",magicAttack:!0,light:!0})),cards[local.Village].push(new Card({name:local.Amulet_of_Infravision,set:set.mirror,types:"Item Magic",skill:!0,light:!0})),cards[local.Village].push(new Card({name:local.Gem_of_Healing,set:set.mirror,types:"Item Magic",healsWound:!0})),cards[local.Village].push(new Card({name:local.Tome_of_Knowledge,set:set.mirror,types:"Item"})),cards[local.Village].push(new Card({name:local.Longbow,set:set.total,types:"Weapon	Bow",attack:!0,skill:5})),cards[local.Village].push(new Card({name:local.Longsword,set:set.total,types:"Weapon	Edged",attack:!0,skill:4})),cards[local.Village].push(new Card({name:local.Punching_Dagger,set:set.total,types:"Weapon	Edged Dagger",attack:!0,skill:3})),cards[local.Village].push(new Card({name:local.Quarterstaff,set:set.total,types:"Weapon	Blunt",attack:!0,skill:1})),cards[local.Village].push(new Card({name:local.Arcane_Touch,set:set.total,types:"Spell Arcane",magicAttack:!0})),cards[local.Village].push(new Card({name:local.Consecration,set:set.total,types:"Spell Divine",magicAttack:!0})),cards[local.Village].push(new Card({name:local.Lightning_Bolt,set:set.total,types:"Spell Elemental",magicAttack:!0,light:!0})),cards[local.Village].push(new Card({name:local.Natures_Fury,set:set.total,types:"Spell Elemental",light:!0})),cards[local.Village].push(new Card({name:local.Elven_Ring,set:set.total,types:"Item Magic"})),cards[local.Village].push(new Card({name:local.Headband_of_Intellect,set:set.total,types:"Item Magic",magicAttack:!0})),cards[local.Village].push(new Card({name:local.Strength_Gauntlets,set:set.total,types:"Item Magic",attack:!0,skill:!0})),cards[local.Village].push(new Card({name:local.Wand_of_Light,set:set.total,types:"Item Magic",light:!0})),cards[local.Village].push(new Card({name:local.Battle_Axe,set:set.risen,types:"Weapon Edged",attack:!0,skill:6})),cards[local.Village].push(new Card({name:local.Boomerang,set:set.risen,types:"Weapon Blunt Edged",attack:!0,skill:4})),cards[local.Village].push(new Card({name:local.Crystal_Dagger,set:set.risen,types:"Weapon Edged Magic Dagger",attack:!0,skill:2,light:!0})),cards[local.Village].push(new Card({name:local.Holy_Mace,set:set.risen,types:"Weapon Blunt Divine",attack:!0,skill:4})),cards[local.Village].push(new Card({name:local.Arcane_Aura,set:set.risen,types:"Spell Arcane",magicAttack:!0,light:!0})),cards[local.Village].push(new Card({name:local.Charm_Monster,set:set.risen,types:"Spell Arcane",magicAttack:!0})),cards[local.Village].push(new Card({name:local.Enchant_Weapons,set:set.risen,types:"Spell Arcane"})),cards[local.Village].push(new Card({name:local.Vampiric_Touch,set:set.risen,types:"Spell Chaos",magicAttack:!0,healsWound:!0})),cards[local.Village].push(new Card({name:local.Crystal_of_Scrying,set:set.risen,types:"Item Magic"})),cards[local.Village].push(new Card({name:local.Holy_Symbol,set:set.risen,types:"Item Divine",light:!0})),cards[local.Village].push(new Card({name:local.Ring_of_Learning,set:set.risen,types:"Item Magic",skill:!0})),cards[local.Village].push(new Card({name:local.Potion_of_Stamina,set:set.risen,types:"Item Magic"})),cards[local.Village].push(new Card({name:local.Death_Pact,set:set.foundations,types:"Spell Chaos",magicAttack:!0})),cards[local.Village].push(new Card({name:local.Mirror_Image,set:set.foundations,types:"Spell Arcane Chaos"})),cards[local.Village].push(new Card({name:local.Tempest,set:set.foundations,types:"Spell Elemental",magicAttack:!0,light:!0})),cards[local.Village].push(new Card({name:local.True_Seeing,set:set.foundations,types:"Spell Arcane Divine"})),cards[local.Village].push(new Card({name:local.Broadsword,set:set.foundations,types:"Weapon Edged",attack:!0,skill:5})),cards[local.Village].push(new Card({name:local.Crossbow,set:set.foundations,types:"Weapon Bow",attack:!0,skill:3})),cards[local.Village].push(new Card({name:local.Flail,set:set.foundations,types:"Weapon Blunt",attack:!0,skill:5})),cards[local.Village].push(new Card({name:local.Two_Handed_Sword,set:set.foundations,types:"Weapon Edged",attack:!0,skill:7})),cards[local.Village].push(new Card({name:local.Damilu_Huskie,set:set.foundations,types:"Item Ally",attack:!0})),cards[local.Village].push(new Card({name:local.Darameres_Cloak,set:set.foundations,types:"Item Magic"})),cards[local.Village].push(new Card({name:local.Potion_of_Light,set:set.foundations,types:"Item Magic",light:!0})),cards[local.Village].push(new Card({name:local.Ring_of_Proficiency,set:set.foundations,types:"Item Magic",skill:!0})),cards[local.Village].push(new Card({name:local.Cursed_Mace,set:set.ripples,types:"Weapon Blunt Cursed",attack:!0,skill:4})),cards[local.Village].push(new Card({name:local.Kings_Sword,set:set.ripples,types:"Weapon Edged",attack:!0,skill:7})),cards[local.Village].push(new Card({name:local.Longspear,set:set.ripples,types:"Weapon Edged",attack:!0,skill:4})),cards[local.Village].push(new Card({name:local.Magi_Staff,set:set.ripples,types:"Weapon Blunt Magic",attack:!0,skill:3})),cards[local.Village].push(new Card({name:local.Creeping_Death,set:set.ripples,types:"Spell Chaos",magicAttack:!0})),cards[local.Village].push(new Card({name:local.Frost_Bolt,set:set.ripples,types:"Spell Elemental",magicAttack:!0})),cards[local.Village].push(new Card({name:local.Mind_Control,set:set.ripples,types:"Spell Arcane Chaos"})),cards[local.Village].push(new Card({name:local.Summon_Storm,set:set.ripples,types:"Spell Elemental",magicAttack:!0,light:!0})),cards[local.Village].push(new Card({name:local.Amulet_of_Power,set:set.ripples,types:"Item Magic",skill:!0,light:!0})),cards[local.Village].push(new Card({name:local.Lightstone_Gem,set:set.ripples,types:"Item Magic",light:!0})),cards[local.Village].push(new Card({name:local.Natures_Amulet,set:set.ripples,types:"Item Magic",skill:!0,magicAttack:!0})),cards[local.Village].push(new Card({name:local.Ring_of_Spell_Storing,set:set.ripples,types:"Item Magic"})),cards[local.Village].push(new Card({name:local.Bastard_Sword,set:set.whatlies,types:"Weapon Edged",attack:!0,weight:7})),cards[local.Village].push(new Card({name:local.Battlepick,set:set.whatlies,types:"Weapon Edged",attack:!0,weight:4,discard:!0})),cards[local.Village].push(new Card({name:local.Cleaners_Net,set:set.whatlies,types:"Weapon Blunt",attack:!0,weight:1})),cards[local.Village].push(new Card({name:local.The_Five_Points,set:set.whatlies,types:"Weapon Edged",attack:!0,weight:8,discard:!0})),cards[local.Village].push(new Card({name:local.Acid_Burst,set:set.whatlies,types:"Spell Arcane Elemental",magicAttack:!0})),cards[local.Village].push(new Card({name:local.Ascendance,set:set.whatlies,types:"Spell Arcane Chaos Divine",light:!0})),cards[local.Village].push(new Card({name:local.Cure_Disease,set:set.whatlies,types:"Spell Chaos",magicAttack:!0,healsWound:!0})),cards[local.Village].push(new Card({name:local.Haste,set:set.whatlies,types:"Spell Chaos",skill:!0,light:!0,discard:!0})),cards[local.Village].push(new Card({name:local.Bracers_of_Cleansing,set:set.whatlies,types:"Item Magic",magicAttack:!0,skill:!0,light:!0})),cards[local.Village].push(new Card({name:local.Neverending_Rope_Spool,set:set.whatlies,types:"Item Magic",discard:!0})),cards[local.Village].push(new Card({name:local.Studded_Leather_Shirt,set:set.whatlies,types:"Item"})),cards[local.Village].push(new Card({name:local.Wand_of_Illumination,set:set.whatlies,types:"Item Magic",magicAttack:!0,light:!0})),cards[local.Village].push(new Card({name:local.Fire_Rod,set:set.frozen,types:"Weapon Magic Elemental",magicAttack:!0,weight:9,light:!0})),cards[local.Village].push(new Card({name:local.Mechanical_Harpoon,set:set.frozen,types:"Weapon Bow Edged",attack:!0,weight:5})),cards[local.Village].push(new Card({name:local.Frost_Bow,set:set.frozen,types:"Weapon Magic Bow Elemental",magicAttack:!0,weight:6})),cards[local.Village].push(new Card({name:local.Flaming_Hammer,set:set.frozen,types:"Weapon Blunt",attack:!0,weight:8,light:!0})),cards[local.Village].push(new Card({name:local.Blizzard,set:set.frozen,types:"Spell Elemental",magicAttack:!0})),cards[local.Village].push(new Card({name:local.Cone_of_Cold,set:set.frozen,types:"Spell Arcane Chaos Elemental",magicAttack:!0})),cards[local.Village].push(new Card({name:local.Create_Fire,set:set.frozen,types:"Spell Elemental",magicAttack:!0,light:!0})),cards[local.Village].push(new Card({name:local.Inner_Fire,set:set.frozen,types:"Spell Arcane Elemental",skill:!0,light:!0})),cards[local.Village].push(new Card({name:local.Eternal_Flame,set:set.frozen,types:"Item Magic Elemental",magicAttack:!0,skill:!0,light:!0})),cards[local.Village].push(new Card({name:local.Ice_Climbing_Gear,set:set.frozen,types:"Item",attack:!0,skill:!0,light:!0})),cards[local.Village].push(new Card({name:local.Snow_Trekking_Tools,set:set.frozen,types:"Item",skill:!0,light:!0})),cards[local.Village].push(new Card({name:local.Tent,set:set.frozen,types:"Item",skill:3,light:!0})),cards[local.Tile1].push(new Card({name:local.Abandoned_Gate,set:set.mirror})),cards[local.Tile2].push(new Card({name:local.Crypt,set:set.mirror})),cards[local.Tile1].push(new Card({name:local.Mine,set:set.mirror})),cards[local.Tile2].push(new Card({name:local.Sunken_Well,set:set.mirror})),cards[local.Tile3].push(new Card({name:local.Throne_Room,set:set.mirror})),cards[local.Tile3].push(new Card({name:local.Vault,set:set.mirror})),cards[local.Tile3].push(new Card({name:local.Elven_Outpost,set:set.total})),cards[local.Tile3].push(new Card({name:local.Elven_Ruins,set:set.total})),cards[local.Tile1].push(new Card({name:local.Fairy_Meadow,set:set.total})),cards[local.Tile2].push(new Card({name:local.Hollow_Tree,set:set.total})),cards[local.Tile1].push(new Card({name:local.Ominous_Looking_Road,set:set.total})),cards[local.Tile2].push(new Card({name:local.Tree_House,set:set.total})),cards[local.Tile1].push(new Card({name:local.Alchemy_Chamber,set:set.risen})),cards[local.Tile3].push(new Card({name:local.Blood_Altar_Room,set:set.risen})),cards[local.Tile2].push(new Card({name:local.Bog,set:set.risen})),cards[local.Tile3].push(new Card({name:local.The_Lichs_Tomb,set:set.risen})),cards[local.Tile1].push(new Card({name:local.The_Servants_Tombs,set:set.risen})),cards[local.Tile2].push(new Card({name:local.Sunken_Graveyard,set:set.risen})),cards[local.Tile3].push(new Card({name:local.Abyssal_Temple,set:set.foundations})),cards[local.Tile1].push(new Card({name:local.Air_Temple,set:set.foundations})),cards[local.Tile3].push(new Card({name:local.Celestial_Temple,set:set.foundations})),cards[local.Tile2].push(new Card({name:local.Earth_Temple,set:set.foundations})),cards[local.Tile2].push(new Card({name:local.Fire_Temple,set:set.foundations})),cards[local.Tile1].push(new Card({name:local.Water_Temple,set:set.foundations})),cards[local.Tile1].push(new Card({name:local.Gate_Cavern,set:set.ripples})),cards[local.Tile2].push(new Card({name:local.Dangerous_Passageway,set:set.ripples})),cards[local.Tile3].push(new Card({name:local.Fire_Chasm,set:set.ripples})),cards[local.Tile3].push(new Card({name:local.Arches,set:set.whatlies})),cards[local.Tile3].push(new Card({name:local.Catacombs,set:set.whatlies})),cards[local.Tile2].push(new Card({name:local.Ghoul_Nest,set:set.whatlies})),cards[local.Tile1].push(new Card({name:local.Junction,set:set.whatlies})),cards[local.Tile1].push(new Card({name:local.Rat_Nest,set:set.whatlies})),cards[local.Tile2].push(new Card({name:local.Trog_Village,set:set.whatlies})),cards[local.Tile3].push(new Card({name:local.Adlet_Hunting_Ground,set:set.frozen})),cards[local.Tile3].push(new Card({name:local.Glacial_Tomb,set:set.frozen})),cards[local.Tile1].push(new Card({name:local.Icy_Glade,set:set.frozen})),cards[local.Tile2].push(new Card({name:local.Orc_Tribute_Site,set:set.frozen})),cards[local.Tile2].push(new Card({name:local.Tundra_Chasms,set:set.frozen})),cards[local.Tile1].push(new Card({name:local.Volcanic_Hot_Springs,set:set.frozen})),allCards=new Array;
for(var dungeonListHTML="",villageListHTML="",cardListHTML="",i=0;i<cardTypes.length;i++){var type=cardTypes[i];"Dungeon"==type.side?dungeonListHTML+='<ul id="'+type.cssId+'List" class="cardList dungeon"></ul>':villageListHTML+='<ul id="'+type.cssId+'List" class="cardList village"></ul>',cardListHTML+=Render.cardList(type)}document.getElementById("dungeonTypes").innerHTML=dungeonListHTML,document.getElementById("villageTypes").innerHTML=villageListHTML,document.getElementById("filterSetList").innerHTML=Render.setList(),document.getElementById("filterCardList").innerHTML=cardListHTML,Options.restoreOptions(),Util.localizeUI();